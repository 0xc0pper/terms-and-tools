# SQLi Overview / Syntax

Databases use SQL to talk with databases

An SQL statement looks like this
`SELECT name, description FROM products WHERE id=9;`
This queries the database, asking for the name and the description of a record in the products table. In this example the selected record will have an id value of 9

## SELECT STATEMENT

`SELECT <columnds list> FROM <table> WHERE <condition>;`

## UNION COMMAND

`<SELECT statement> UNION <other SELECT statement>;`
Performs a union between two results

## DISTINCT OPERATOR

If a table or query contain duplicate rows, you can use the DISTINCT operator to filter out duplicate entities
`<SELECT DISTINCT <field list> <remainder of the statement>;`

## ALL OPERATOR

A UNION statement implies DISTINCT by default. You can prevent that by using the ALL operator
`<SELECT statement> UNION ALL <other SELECT statement>;`

## COMMENTS

There are two strings you can use to comment a line in SQL

1.  \# (hash symbol)
2.  \-\- (two dashes FOLLOWED by a space)

### PRODUCTS

| ID  | Name | Description |
| --- | --- | --- |
| 1   | Shoes | Nice Shoes |
| 2   | Hat | Black Hat |
| 18  | T Shirt | Cheap |

### ACCOUNTS

| Username | Password | Email |
| --- | --- | --- |
| admin | HxZsO9AR | admin@site.com |
| staff | ihKdNTU4 | staff@site.com |
| user | Iwsi7Ks8 | usr @othersite.com |

The following two queries provide the same result:
`SELECT Name, Description FROM Products WHERE ID='1';`
`SELECT Name, Description FROM Products WHERE Name='Shoes';`
This results in a table containing one row

| Name | Description |
| --- | --- |
| Shoes | Nice Shoes |

This is a UNION example between two SELECT statements
`SELECT Name, Description FROM Products WHERE ID='3' UNION SELECT Username, Password FROM Accounts;`
The result is a query with a table containing a row with the Hat item and all usernames and passwords from the Accounts table.

| Name | Description |
| --- | --- |
| Hat | Black Hat |
| admin | HxZsO9AR |
| staff | ihKdNTU4 |
| user | Iwsi7Ks8 |

You can also perform a UNION operation with some chosen data
`SELECT Name, Description FROM Products WHERE ID='3' UNION SELECT 'Example', 'Data';`
Results is a table containing the row hat and a the provided custom row

| Name | Description |
| --- | --- |
| Hat | Black Hat |
| Example | Data |

## SQL Queries Inside Web Applications

PHP example of a connection to a MySQL Database (STATIC)

```php
$dbhostname='1.2.3.4';
$dbuser='username';
$dbpassword='password';
$dbname='database';

$connection = mysqli_connect($dbhostname, $dbuser, $dbpassword, $dbname);
$query = "SELECT Name, Description FROM Products WHERE ID='3' UNION SELECT Username, Password FROM Accounts;";

$results = mysqli_query($connection, $query);
display_results($results);
```

Terms:
`$connection` is a an onject referencing the connection to the database
`$query` contains the query
`mysqli_query()` is a function which submits the query to the database
`display_results()` renders the data

PHP example of a connection to a MySQL Database (DYNAMIC)

```php
$id = $_GET['id'];

$connection = mysqli_connect($dbhostname, $dbuser, $dbpassword, $dbname);
$query = "SELECT Name, Description FROM Products WHERE ID=$id';";

$results = mysqli_query($connection, $query);
display_results($results);
```

This piece of code shoes **user supplied** input to build a query. (The `id` parameter of the `GET` request)
This behavior is dangerous because a malicious user can exploit the query construction to take control of the database.

The dynamic query:
`SELECT Name, Description FROM Products WHERE ID='$id';`
This expects `$id` values such as:

- 1 = `SELECT Name, Description FROM Products WHERE ID='1';`
- Example = `SELECT Name, Description FROM Products WHERE ID='Example';`
- Itid3 = `SELECT Name, Description FROM Products WHERE ID='Itid3';`
- Or any other string

We can cradt an `$id` that actually changes the query.
`' OR 'a'='a`
Then the query becomes
`SELECT Name, Description FROM Products WHERE ID='' OR 'a'='a';`

This tells the database to select the items by checking two conditions:

- The id must be empty (`id=''`)
- OR an wlays true condition (`'a'='a'`)

This tells the database to select all the items in the Products table.

An attacker could also exploit the UNION command by supplying
`' UNION SELECT Username, Password FROM Accounts WHERE 'a'='a`
Thus changing the original query to:
`SELECT Name, Description FROM Products WHERE ID='' UNION SELECT Username, Password FROM Accounts WHERE 'a'='a';`

This asks the database to select the items with an empty id, thus selecting an empty set and then to perform a union with all the entries in the Accounts table.

## IN-BAND SQL Injections

**In-Band SQLi** leverage the same channel used to inject the SQL code (i.e. pages generated by the web application)
During this attack the pentester finds a way to ask the web application for the desired information.

## ERROR BASED SQL Injections

**Error Based SQLi** the penetration tester tries to force the DBMS to output an error message and then uses that information to perform data exfiltration. Errors could be sent via the web app output or by other means such as automated reports or emails.

## BLIND SQL Injections

A web app vulnerable to **Blind SQLi** does not reflect the results of the injection on the output. In this case the pentester must find an inference method to exploit the vulnerability. This is mostly done using true/false statements
